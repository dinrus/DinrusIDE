#include "DinrusLLVM.h"

        РНЦП::Модуль::Модуль(ткст идМодуля)
		{
			РНЦП::Модуль::Модуль(ЛЛМодуль_СоздайСИменем(вТкст0(идМодуля)));
        }
///////////
        РНЦП::Модуль::Модуль(ткст идМодуля, РНЦП::Контекст контекст)
		{
			РНЦП::Модуль::Модуль(ЛЛМодуль_СоздайСИменемВКонтексте(вТкст0(идМодуля), контекст -> дай()));
        }
//////////
        проц РНЦП::Модуль::линкуйМодули(РНЦП::Модуль куда, РНЦП::Модуль исток)
		{
			ЛЛКомпонуйМодули2(куда -> дай(), исток -> дай());
		}
//////////
		ЛЛМодуль РНЦП::Модуль::дай()
		{
			return this -> м_сам;
		}
/////////
        РНЦП::Модуль::Модуль(ЛЛМодуль m)
		{
			this -> м_сам = m;
		}
///////////
        РНЦП::Модуль::~Модуль()
		{
		ЛЛВыместиМодуль(this->дай());
		}
///////////
        ткст РНЦП::Модуль::раскладкаДанных()
        {
            return ll.common.вТкст(ЛЛДайСтрРаскладкиДанных(this -> дай()));
        }
/////////
        проц РНЦП::Модуль::раскладкаДанных( ткст ткт)
        {
             ЛЛУстРаскладкуДанных(this -> дай(), вТкст0(ткт));
        }
//////////
        Контекст РНЦП::Модуль::контекст()
		{
			return РНЦП::Контекст(ЛЛДайКонтекстМодуля(this -> дай()));
		}
///////////
        Модуль РНЦП::Модуль::клонируйМодуль()
		{
		//	return LLVM.CloneModule(this -> дай());
		}
///////////
        проц РНЦП::Модуль::дамп()
		{
		ЛЛДампМодуля(this -> дай());
		}
///////////
        бул РНЦП::Модуль::выведиВФайл(ткст имяф, out ткст0 ошСооб)
		{
			return ЛЛВыведиМодульВФайл(this -> дай(), вТкст0(имяф), &ошСооб);
		}
//////////
        ткст РНЦП::Модуль::выведиВТкст()
        {
            auto ptr = ЛЛВыведиМодульВСтроку(this -> дай());
            auto retVal = Upp::ToString(ptr);
            ЛЛВыместиСообщение(ptr);
            return retVal;
        }
/////////////
        проц РНЦП::Модуль::устИнлайнАсм(ткст asm_)
		{
			ЛЛУстИнлайнАсмМодуля(this -> дай(), вТкст0(asm_));
		}
//////////
        ГлобПеременная РНЦП::Модуль::дайИменГлоб(ткст имя)
		{
			return new ГлобПеременная(ЛЛДайИменованныйГлоб(this -> дай(), вТкст0(имя)));
		}
///////////
        Тип РНЦП::Модуль::дайТипПоИмени(ткст имя)
		{
			return new Тип(ЛЛДайТипПоИмени(this -> дай(), вТкст0(имя)));
		}
///////////
        бцел РНЦП::Модуль::дайЧлоОперандовИМД(ткст имя)
		{
			return ЛЛДайЧлоОперандовИменованныхМетаданных(this -> дай(), ll.common.вТкст0(имя));
		}
/////////////
        Значение[] РНЦП::Модуль::дайОперандыИМД(ткст имя)
		{
			ЛЛЗначение[] приёмник;
			ЛЛДайОперандыИменованныхМетаданных(this -> дай(), ll.common.вТкст0(имя), cast(ЛЛЗначение*) &приёмник);
			Значение[] результат;
			foreach(зн; приёмник)
			{
				результат ~= new Значение(зн);
			}

			return результат;
	    }
/////////////
        проц РНЦП::Модуль::добавьОперандИМД(ткст имя, РНЦП::Значение val)
		{
			ЛЛДобавьОперандИменованныхМетаданных(this -> дай(), ll.common.вТкст0(имя), val -> дай());
        }
///////////
        Функция РНЦП::Модуль::добавьФункцию(ткст имя, РНЦП::Тип типФн)
		{
			return new Функция(ЛЛДобавьФункц(this -> дай(), вТкст0(имя), типФн -> дай()));
		}
//////////
        Функция РНЦП::Модуль::дайИменФункцию(ткст имя)
		{
			return new Функция(ЛЛДайИменованФункц(this -> дай(), вТкст0(имя)));
		}
////////////
        Функция РНЦП::Модуль::первФункц()
		{
			return new Функция(ЛЛДайПервФункц(this -> дай()));
		}
///////////
        Функция РНЦП::Модуль::последнФункц()
		{
			return new Функция(ЛЛДайПоследнФункц(this -> дай()));
		}
///////////
        ГлобЗначение РНЦП::Модуль::добавьГлоб(РНЦП::Тип тип, ткст имя)
		{
			return new ГлобЗначение(ЛЛДобавьГлоб(this -> дай(), тип. -> дай(), вТкст0(имя)));
		}
///////////
        ГлобЗначение РНЦП::Модуль::добавьГлобВАдрПростр(РНЦП::Тип тип, ткст имя, бцел адреснПрострво)
		{
			return new ГлобЗначение(ЛЛДобавьГлобВАдрПрострво(this -> дай(), тип -> дай(), вТкст0(имя), адреснПрострво));
		}
////////////
        ГлобЗначение РНЦП::Модуль::дайИменованЗнач(ткст имя)
		{
			return new ГлобЗначение(ЛЛДайИменованныйГлоб(this -> дай(), вТкст0(имя)));
		}
/////////////
        ГлобЗначение РНЦП::Модуль::первГлоб()
		{
			return new ГлобЗначение(ЛЛДайПервыйГлоб(this -> дай()));
		}
///////////
        ГлобЗначение РНЦП::Модуль::последнГлоб()
		{
			return new ГлобЗначение(ЛЛДайПоследнийГлоб(this -> дай()));
		}
////////////
        ГлобЗначение РНЦП::Модуль::добавьНик(РНЦП::Тип тип, РНЦП::Значение aliasee, ткст имя)
		{
			return new ГлобЗначение(ЛЛДобавьНик(this -> дай(), тип -> дай(), aliasee -> дай(), вТкст0(имя)));
		}
/////////////
        бцел РНЦП::Модуль::дайИдТипаМД(ткст имя)
		{
			return ЛЛДайИДТипаМДВКонтексте(this.контекст -> дай(), вТкст0(имя), cast(бцел)имя.length);
		}
////////////
        МодульПровайдер РНЦП::Модуль::создайМПДляМодуля()
		{
			return new МодульПровайдер(ЛЛСоздайМодульПровайдерДляСущМодуля(this -> дай()));
		}
////////////
        public МенеджерПроходок РНЦП::Модуль::создайМПФДляМодуля()
		{
			return new МенеджерПроходок(ЛЛСоздайМенеджерФукнцПроходокДляМодуля(this -> дай()));
		}
///////////
        void РНЦП::Модуль::Verify()
        {
            if(!this.TryVerify(out ткст message))
            {
                throw new InvalidOperationException(message);
            }
        }
/////////
        bool РНЦП::Модуль::TryVerify(out ткст message)
        {
            auto success = !LLVM.VerifyModule(this -> дай(), LLVMVerifierFailureAction.LLVMPrintMessageAction, out ук messagePtr);
            message = Marshal.PtrToStringAnsi(messagePtr);
            return success;
        }

        цел РНЦП::Модуль::пишиВФайл(ткст путь)
		{
			return ЛЛПишиБиткодВФайл(this -> дай(), вТкст0(путь));
		}

        цел РНЦП::Модуль::пишиВФД(цел fd, бул закрыть_ли, бул небуферировать_ли)
		{
			return ЛЛПишиБиткодВФД(this -> дай(), fd, закрыть_ли, небуферировать_ли);
		}

        цел РНЦП::Модуль::пишиВФук(цел handle)
		{
			return ЛЛПишиБиткодВФайлУк(this -> дай(), handle);
		}

        БуфПам РНЦП::Модуль::пишиВБуфПам()
		{
			return new БуфПам(ЛЛПишиБиткодВБуфПамяти(this -> дай()));
		}

        bool РНЦП::Модуль::Equals(РНЦП::Модуль other)
		{
			return ReferenceEquals(other, null) ? false :  this-> дай() == other -> дай();
		}

        override bool РНЦП::Модуль::Equals(object obj)
		{
			return this.Equals(obj as РНЦП::Модуль);
		}

        bool РНЦП::Модуль::operator ==(Модуль op1, Модуль op2)
		{
			return ReferenceEquals(op1, null) ? ReferenceEquals(op2, null) : op1.Equals(op2);
		}

        bool РНЦП::Модуль::operator !=(Модуль op1, Модуль op2)
		{
			return !(op1 == op2);
		}

        override цел РНЦП::Модуль::GetHashCode()
		{
			return this.экземпл.GetHashCode();
		}

        ткст РНЦП::Модуль::цель()
        {
           // get { Marshal.PtrToStringAnsi(LLVM.GetTargetAsPtr(this.раскрой()));}
            //set { LLVM.SetTarget(this.раскрой(), значение);}
        }

    