#include <DinrusPro/DinrusCore.h>

бул проверьУтф8(кткст0 s, цел len)
{
	return изУтф8_([](шим) {}, s, len);
}

цел длинаУтф8(const шим *s, цел len)
{
	цел rlen = 0;
	for(const шим *lim = s + len; s < lim; s++)
		вУтф8_([&](сим) { rlen++; }, *s);
	return rlen;
}

проц вУтф8(сим *t, const шим *s, цел len)
{
	for(const шим *lim = s + len; s < lim; s++)
		вУтф8_([&](сим c) { *t++ = c; }, *s);
}

Ткст вУтф8(const шим *s, цел len)
{
	Ткст r;
	for(const шим *lim = s + len; s < lim; s++)
		вУтф8_([&](сим c) { r.кат(c); }, *s);
	return r;
}

цел длинаУтф8(const сим16 *s, цел len)
{
	цел rlen = 0;
	изУтф16_([&](шим code) { вУтф8_([&](сим c) { rlen++; }, code); }, s, len);
	return rlen;
}

проц вУтф8(сим *t, const сим16 *s, цел len)
{
	изУтф16_([&](шим code) { вУтф8_([&](сим c) { *t++ = c; }, code); }, s, len);
}

Ткст вУтф8(const сим16 *s, цел len)
{
	ТкстБуф r;
	r.резервируй(len);
	изУтф16_([&](шим code) { вУтф8_([&](сим c) { r.кат(c); }, code); }, s, len);
	return Ткст(r);
}

цел длинаУтф16(const шим *s, цел len)
{
	цел rlen = 0;
	for(const шим *lim = s + len; s < lim; s++)
		вУтф16_([&](сим16) { rlen++; }, *s);
	return rlen;
}

цел вУтф16(сим16 *t, const шим *s, цел len)
{
	сим16 *t0 = t;
	for(const шим *lim = s + len; s < lim; s++)
		вУтф16_([&](сим16 c) { *t++ = c; }, *s);
	return цел(t - t0);
}

Вектор<сим16> вУтф16(const шим *s, цел len)
{
	Вектор<сим16> r;
	r.резервируй(len);
	for(const шим *lim = s + len; s < lim; s++)
		вУтф16_([&](сим16 c) { r.добавь(c); }, *s);
	return r;
}

цел длинаУтф16(кткст0 s, цел len)
{
	цел rlen = 0;
	изУтф8_([&](шим code) {
		вУтф16_([&](сим16) { rlen++; }, code);
	}, s, len);
	return rlen;
}

цел вУтф16(сим16 *t, кткст0 s, цел len)
{
	сим16 *t0 = t;
	изУтф8_([&](шим code) {
		вУтф16_([&](сим16 c) { *t++ = c; }, code);
	}, s, len);
	return цел(t - t0);
}

Вектор<сим16> вУтф16(кткст0 s, цел len)
{
	Вектор<сим16> r;
	изУтф8_([&](шим code) {
		вУтф16_([&](сим16 c) { r.добавь(c); } , code);
	}, s, len);
	return r;
}

цел длинаУтф32(кткст0 s, цел len)
{
	цел rlen = 0;
	изУтф8_([&](шим) { rlen++; }, s, len);
	return rlen;
}

проц вУтф32(шим *t, кткст0 s, цел len)
{
	изУтф8_([&](шим c) { *t++ = c; }, s, len);
}

ШТкст вУтф32(кткст0 s, цел len)
{
	ШТкстБуф r;
	изУтф8_([&](шим c) { r.кат(c); }, s, len);
	return ШТкст(r);
}

цел длинаУтф32(const сим16 *s, цел len)
{
	цел rlen = 0;
	изУтф16_([&](шим) { rlen++; }, s, len);
	return rlen;
}

проц вУтф32(шим *t, const сим16 *s, цел len)
{
	изУтф16_([&](шим c) { *t++ = c; }, s, len);
}

ШТкст вУтф32(const сим16 *s, цел len)
{
	ШТкстБуф r;
	r.резервируй(len);
	изУтф16_([&](шим c) { r.кат(c); }, s, len);
	return ШТкст(r);
}

Ткст утф8ВАски(const Ткст& ист)
{
	ТкстБуф r(ист.дайДлину());
	кткст0 s = ист.begin();
	кткст0 lim = ист.end();

	сим *t = r;
	while(s < lim)
		*t++ = (ббайт)*s < 128 ? *s++ : вАски(достаньУтф8(s, lim));
	r.устДлину(цел(t - ~r));
	return Ткст(r);
}

Ткст утф8ВАскиЗаг(const Ткст& ист)
{
	ТкстБуф r(ист.дайДлину());
	кткст0 s = ист.begin();
	кткст0 lim = ист.end();

	сим *t = r;
	while(s < lim) {
		*t++ = (ббайт)*s <= 'Z' ? *s++ : вАскиЗаг(достаньУтф8(s, lim));
	}
	r.устДлину(цел(t - ~r));
	return Ткст(r);
}

Ткст утф8ВАскиПроп(const Ткст& ист)
{
	ТкстБуф r(ист.дайДлину());
	кткст0 s = ист.begin();
	кткст0 lim = ист.end();

	сим *t = r;
	while(s < lim)
		*t++ = вАскиПроп(достаньУтф8(s, lim));
	r.устДлину(цел(t - ~r));
	return Ткст(r);
}

