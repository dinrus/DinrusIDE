#include <DinrusPro/DinrusPro.h>

namespace ДинрусРНЦП {

static проц загрузиИниПоток(Поток &sin, ВекторМап<Ткст, Ткст>& ret, кткст0 sfile);

static проц загрузиИниФайл(кткст0 имяф, ВекторМап<Ткст, Ткст>& ret)
{
	ФайлВвод in(имяф);
	if(in) загрузиИниПоток(in, ret, имяф);
}

static проц загрузиИниПоток(Поток& in, ВекторМап<Ткст, Ткст>& ключ, кткст0 sfile)
{
	бул env = false;
	while(!in.кф_ли()) {
		Ткст line = in.дайСтроку();
		СиПарсер p(line);
		if(p.ид_ли()) {
			Ткст k = p.читайИд();
			if(p.сим('=')) {
				Ткст h = обрежьОба((Ткст)p.дайПбелУк());
				if(env) {
					Ткст hh;
					кткст0 s = ~h;
					while(*s) {
						if(*s == '$') {
							s++;
							if(*s == '$') {
								hh.кат('$');
								s++;
							}
							else {
								Ткст ид;
								if (*s == '{') {
									while(*++s != '}')
										ид.кат(*s);
									s++;
								} else {
									while(iscid(*s))
										ид.кат(*s++);
								}
								hh.кат(дайСреду(ид));
							}
						}
						else
							hh.кат(*s++);
					}
					ключ.добавь(k, hh);
				}
				else
					ключ.добавь(k, h);
			}
		}
		else
		if(p.сим('@')) {
			if(p.ид("include")) {
				Ткст фн = p.дайУк();
				if(!полнпуть_ли(фн) && sfile)
					фн = приставьИмяф(дайПапкуФайла(дайПолнПуть(sfile)), фн);
				загрузиИниФайл(фн, ключ);
			}
			else
			if(p.ид("end"))
				return;
			else
			if(p.ид("replace-env"))
				env = true;
			else
			if(p.ид("ignore-env"))
				env = false;
		}
	}
}

ВекторМап<Ткст, Ткст> загрузиИниПоток(Поток &sin)
{
    ВекторМап<Ткст, Ткст> ret;
    загрузиИниПоток(sin, ret, NULL);
    return ret;
}

ВекторМап<Ткст, Ткст> загрузиИниФайл(кткст0 имяф)
{
    ВекторМап<Ткст, Ткст> ret;
    загрузиИниФайл(имяф, ret);
    return ret;
}

static СтатическийСтопор sMtx;
static char  sИниFile[512];

цел ini_version__ = 1;

проц перезагрузиФайлИни()
{
	Стопор::Замок __(sMtx);
	ini_version__++;
}

проц устФайлИни(кткст0 имя) {
	Стопор::Замок __(sMtx);
	strncpy(sИниFile, имя, 511);
	перезагрузиФайлИни();
}

проц ИниSet__(цел& версия)
{
	версия = ini_version__;
}

Ткст дайФайлИни()
{
	return *sИниFile ? sИниFile : ~конфигФайл("q.ini");
}

static ВекторМап<Ткст, Ткст>& sИниKeys()
{
	static ВекторМап<Ткст, Ткст> ключ;
	static цел версия;
	if(версия != ini_version__) {
		версия = ini_version__;
		ключ = загрузиИниФайл(дайФайлИни());
	#ifdef PLATFORM_WIN32
		if(ключ.дайСчёт() == 0)
			ключ = загрузиИниФайл(~дайФайлИзПапкиИсп("q.ini"));
		if(ключ.дайСчёт() == 0)
			ключ = загрузиИниФайл("c:\\q.ini");
	#endif
	#ifdef PLATFORM_POSIX
		if(ключ.дайСчёт() == 0)
			ключ = загрузиИниФайл(дайФайлИзДомПапки("q.ini"));
	#endif
	}
	return ключ;
}

ВекторМап<Ткст, Ткст> дайКлючиИни()
{
	Стопор::Замок __(sMtx);
	return клонируй(sИниKeys());
}

Ткст дайКлючИни(кткст0 ид, const Ткст& опр) {
	ПРОВЕРЬ_(главнаяПущена(), "дайКлючИни is allowed only after APP_MAIN has started");
	Стопор::Замок __(sMtx);
	return sИниKeys().дай(ид, опр);
}

Ткст дайКлючИни(кткст0 ид)
{
	return дайКлючИни(ид, Ткст());
}

static СтатическийСтопор strMtx;

ИниТкст::operator Ткст()
{
	Ткст x;
	{
		Стопор::Замок __(strMtx);
		Ткст& s = (*ссыл_фн)();
		if(иниИзменён__(версия)) {
			s = обрежьОба(дайКлючИни(ид));
			if(пусто_ли(s))
				s = (*опр)();
		}
		x = s;
		ИниSet__(версия);
	}
	return x;
}

Ткст ИниТкст::operator=(const Ткст& s)
{
	Стопор::Замок __(strMtx);
	(*ссыл_фн)() = s;
	ИниSet__(версия);
	return s;
}

Ткст ИниТкст::вТкст() const
{
	return (Ткст)const_cast<ИниТкст&>(*this);
}

дол ReadИниInt(кткст0 ид)
{
	Ткст s = дайКлючИни(ид);
	СиПарсер p(s);
	дол num;
	цел зн = 1;
	if(p.сим('-'))
		зн = -1;
	else
		p.сим('+');
	if(p.сим2('0', 'x') || p.сим2('0', 'X'))
		num = p.читайЧисло64(16);
	else
	if(p.число_ли())
		num = p.читайЧисло();
	else
		return Null;
	num = зн * num;
	if(p.сим('K'))
		num <<= 10;
	else
	if(p.сим('M'))
		num <<= 20;
	else
	if(p.сим('G'))
		num <<= 30;
	else
	if(p.сим('T'))
		num <<= 40;
	return num;
}

цел ИниЦел::грузи() {
	Стопор::Замок __(sMtx);
	if(иниИзменён__(версия)) {
		дол v = ReadИниInt(ид);
		значение = пусто_ли(v) ? (*опр)() : (цел)v;
		ИниSet__(версия);
	}
	return значение;
}

цел ИниЦел::operator=(цел b) {
	Стопор::Замок __(sMtx);
	значение = b;
	ИниSet__(версия);
	return b;
}

Ткст ИниЦел::вТкст() const
{
	return какТкст((цел)const_cast<ИниЦел&>(*this));
}

static СтатическийСтопор si64Mtx;

ИниЦел64::operator дол()
{
	Стопор::Замок __(si64Mtx);
	if(иниИзменён__(версия)) {
		значение = ReadИниInt(ид);
		if(пусто_ли(значение))
			значение = (*опр)();
		ИниSet__(версия);
	}
	return значение;
}

дол ИниЦел64::operator=(дол b)
{
	Стопор::Замок __(si64Mtx);
	значение = b;
	return b;
}

Ткст ИниЦел64::вТкст() const
{
	return какТкст((дол)const_cast<ИниЦел64&>(*this));
}

дво ИниДво::грузи()
{
	Стопор::Замок __(sMtx);
	if(иниИзменён__(версия)) {
		значение = сканДво(обрежьОба(впроп(дайКлючИни(ид))));
		if(пусто_ли(значение))
			значение = (*опр)();
		ИниSet__(версия);
	}
	return значение;
}

дво ИниДво::operator=(дво b)
{
	Стопор::Замок __(sMtx);
	значение = b;
	ИниSet__(версия);
	return b;
}

Ткст ИниДво::вТкст() const
{
	return какТкст((дво)const_cast<ИниДво&>(*this));
}

бул ИниБул::грузи() {
	Стопор::Замок __(sMtx);
	if(иниИзменён__(версия)) {
		Ткст h = обрежьОба(впроп(дайКлючИни(ид)));
		if(h.дайСчёт())
			значение = h == "1" || h == "yes" || h == "true" || h == "y";
		else
			значение = (*опр)();
		ИниSet__(версия);
	}
	return значение;
}

бул ИниБул::operator=(бул b) {
	Стопор::Замок __(sMtx);
	значение = b;
	ИниSet__(версия);
	return b;
}

Ткст ИниБул::вТкст() const
{
	return какТкст((бул)const_cast<ИниБул&>(*this));
}

Массив<ИниИнфо>& sИниInfo()
{
	static Массив<ИниИнфо> s;
	return s;
}

проц добавьИнфоИни(кткст0 ид, Ткст (*текущ)(), Ткст (*опр)(), кткст0 инфо)
{
	ИниИнфо& f = sИниInfo().добавь();
	f.ид = ид;
	f.текущ = текущ;
	f.опр = опр;
	f.инфо = инфо;
}

const Массив<ИниИнфо>& дайИниИнфо()
{
	return sИниInfo();
}

Ткст дайИниИнфоФ()
{
	Ткст r;
	for(цел i = 0; i < sИниInfo().дайСчёт(); i++) {
		ИниИнфо& f = sИниInfo()[i];
		r << f.ид << " = " << (*f.текущ)() << " [default: " << (*f.опр)() << "]\r\n"
		  << "       " << f.инфо << "\r\n";
	}
	return r;
}

Ткст дефолтнКонтентИниФайла()
{
	Ткст r;
	for(цел i = 0; i < sИниInfo().дайСчёт(); i++) {
		ИниИнфо& f = sИниInfo()[i];
		r << "#" << f.инфо << "\r\n" << f.ид << '=' << (*f.опр)() << "\r\n\r\n";
	}
	return r;
}

Ткст текущКонтентИниФайла(бул comment_defaults)
{
	Ткст r;
	for(цел i = 0; i < sИниInfo().дайСчёт(); i++) {
		ИниИнфо& f = sИниInfo()[i];
		r << "#" << f.инфо << "\r\n";
		if (comment_defaults && (*f.текущ)() == (*f.опр)())
			r << '#';
		r << f.ид << '=' << (*f.текущ)() << "\r\n\r\n";
	}
	return r;
}

проц НастройкиТекста::грузи(кткст0 имяф)
{
	ФайлВвод in(имяф);
	цел themei = 0;
	настройки.добавь("");
	while(!in.кф_ли()) {
		Ткст ln = in.дайСтроку();
		кткст0 s = ln;
		if(*s == '[') {
			s++;
			Ткст theme;
			while(*s && *s != ']')
				theme.кат(*s++);
			themei = настройки.найдиДобавь(theme);
		}
		else {
			if(themei >= 0) {
				Ткст ключ;
				while(*s && *s != '=') {
					ключ.кат(*s++);
				}
				if(*s == '=') s++;
				Ткст значение;
				while(*s) {
					значение.кат(*s++);
				}
				if(!пустой(ключ))
					настройки[themei].дайДобавь(обрежьОба(ключ)) = обрежьОба(значение);
			}
		}
	}
}

Ткст НастройкиТекста::дай(кткст0 группа, кткст0 ключ) const
{
	цел itemi = настройки.найди(группа);
	return itemi < 0 ? Null : настройки.дай(группа).дай(ключ, Null);
}

Ткст НастройкиТекста::дай(цел индексГруппы, кткст0 ключ) const
{
	return индексГруппы >= 0 && индексГруппы < настройки.дайСчёт() ?
	              настройки[индексГруппы].дай(ключ, Null) : Null;
}

Ткст НастройкиТекста::дай(цел индексГруппы, цел индексКлюча) const
{
	if (индексГруппы >= 0 && индексГруппы < настройки.дайСчёт())
		return индексКлюча >= 0 && индексКлюча < настройки[индексГруппы].дайСчёт() ?
		          настройки[индексГруппы][индексКлюча] : Null;
	else
		return Null;
}

};
