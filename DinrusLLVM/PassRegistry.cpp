#include "DinrusLLVM.h"

     ///Конструктор класса
     РНЦП::РеестрПроходок::РеестрПроходок():
         рп_сам(LLPassRegistry_ctor())
     {
     ///this -> рп_сам = LLPassRegistry_ctor();
     }

     ///Деструктор класса
     РНЦП::РеестрПроходок::~РеестрПроходок()
     {
     LLPassRegistry_dtor(this -> рп_сам);
     }

     ///Выводит "истинный" тип)))
     ЛЛРеестрПроходок РНЦП::РеестрПроходок::дай()
     {
     return LLPassRegistry_getPassRegistry(this -> рп_сам);
     }

     ///Что-то перечисляет с помощью штуки по указателю
     проц РНЦП::РеестрПроходок::перечисли_c( ук перечислитель)
     {
     LLPassRegistry_enumerateWith( this -> рп_сам, перечислитель);
     }
     
     ///Добавляется ссылка на PassRegistrationListener
     проц РНЦП::РеестрПроходок::добавьДатчикРегистаций(ук датчик)
     {
       LLPassRegistry_addRegistrationListener
                        (this -> рп_сам, датчик);
       //СДЕЛАТЬ Проверить регистрацию - не известно, как!
       this -> датчик_сам = датчик;
      }

     ///Удаляется ссылка на PassRegistrationListener
     проц РНЦП::РеестрПроходок::удалиДатчикРегистаций()
     {
        LLPassRegistry_removeRegistrationListener (this -> рп_сам,
                             (PassRegistrationListener*) this -> датчик_сам);
         this -> датчик_сам = NULL;
      }

     проц РНЦП::РеестрПроходок::иницЯдро()
		{
			ЛЛИницЯдро(this -> рп_сам);
		}

     проц РНЦП::РеестрПроходок::иницТрансформУтилз()
		{
			ЛЛИницТрансформУтил(this -> рп_сам);
		}

     проц РНЦП::РеестрПроходок::иницСкалярОпц()
		{
			ЛЛИницСкалярОпц(this -> рп_сам);
		}

     проц РНЦП::РеестрПроходок::иницОбджСиАРЦ()
		{
			ЛЛИницОпцОбджСиАРЦ(this -> рп_сам);
		}

     проц РНЦП::РеестрПроходок::иницВекторизацию()
		{
			ЛЛИницВекторизацию(this -> рп_сам);
		}

     проц РНЦП::РеестрПроходок::иницИнстКомб()
		{
			ЛЛИНицИнстКомбин(this -> рп_сам);
		}

     проц РНЦП::РеестрПроходок::иницАгрИнстКомб()
		{
			ЛЛИницАгрессивнИнстКомбайнер(this -> рп_сам);
		}

     проц РНЦП::РеестрПроходок::иницМПО()
		{
			ЛЛИницМПО(this -> рп_сам);
		}

     проц РНЦП::РеестрПроходок::иницИнстр()
		{
			ЛЛИницИнструментацию(this -> рп_сам);
		}

     проц РНЦП::РеестрПроходок::иницАнализ()
		{
			ЛЛИницАнализ(this -> рп_сам);
		}

     проц РНЦП::РеестрПроходок::иницМПА()
		{
			ЛЛИницМПА(this->рп_сам);
		}

     проц РНЦП::РеестрПроходок::иницКодген()
		{
			ЛЛИницКодГен(this->рп_сам);
		}

     проц РНЦП::РеестрПроходок::иницЦель()
		{
			ЛЛИницЦель(this->рп_сам);
		}

     ///Дальше идёт пока ещё не реализованное
/*
    ЛЛИМПОРТ const PassInfo* LLPassRegistry_getPassInfo(ЛЛРеестрПроходок self, const проц* TI);
    ЛЛИМПОРТ const PassInfo* LLPassRegistry_getPassInfo2(ЛЛРеестрПроходок self, StringRef арг);
    ЛЛИМПОРТ  проц LLPassRegistry_registerPass(ЛЛРеестрПроходок self, const PassInfo& PI,
                                                                    bool ShouldFree = false);
    ЛЛИМПОРТ проц LLPassRegistry_registerAnalysisGroup(ЛЛРеестрПроходок self,
                          const ук InterfaceID, const ук PassID,
                           PassInfo& Registeree, bool isDefault, bool ShouldFree = false);
     */

     ////////////////////////////////////////////////
  