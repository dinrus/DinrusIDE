#ifndef _DinrusPro_Funcs_h_
#define _DinrusPro_Funcs_h_
#include <DinrusPro/DinrusPro.h>
#include "Callbacks.h"

/// Предварительные определения
//////////////////////////////
class Ткст;
class ШТкст;
class Дата;
class Время;
class Поток;
class   Ид;
class   Значение;
class СиПарсер;
struct КЗСА;
class Цвет;
struct Комплекс;
/// Список сигнатур реализованных функций
/////////////////////////////////////////
// Auxiliary multithreading - this is not using/cannot use U++ heap, so does not need cleanup.
// Used to resolve some host platform issues.

бул стартВспомНити(auxthread_t (auxthread__ *фн)(ук укз), ук укз);

#ifdef КУЧА_РНЦП
бул MemoryпробуйПеремест__(ук укз, т_мера& newsize);
ПрофильПамяти *PeakMemoryProfile();
ук MemoryAllok__(цел klass);
проц  освободиПамk__(цел klass, ук укз);
#endif

цел  атомнИнк(volatile Атомар& t);
цел  атомнДек(volatile Атомар& t);

проц __LOGF__(кткст0 формат, ...);

цел классТини__(цел sz);

проц начниИницБлок__(кткст0 фн, цел line);
проц завершиИницБлок__(кткст0 фн, цел line);

проц   LOGNOP__();
бул    режимПаники_ли();
проц   паника(кткст0 msg);
проц   устБоксСообПаники(проц (*mb)(кткст0 title, кткст0 text));
проц   боксСообПаники(кткст0 title, кткст0 text);

бул    нч_ли(дво d);
бул    беск_ли(дво d);
бул    конечен(дво d);

#ifdef CPU_X86
бул цпбММХ();
бул цпбССЕ();
бул цпбССЕ2();
бул цпбССЕ3();
бул цпбГипервизор();
бул цпбАВХ();
#endif

цел  цпбЯдра();
проц дайСтатусСисПамяти(бдол& total, бдол& available);

#ifdef PLATFORM_WINCE
кткст0 изСисНабСима(const шим *s);
const шим *вСисНабСим(кткст0 s);
#else
inline кткст0 изСисНабСима(кткст0 s) { return s; }
inline кткст0 вСисНабСим(кткст0 s) { return s; }
#endif

//Mem.h

проц устпам8(ук укз, ббайт данные, т_мера счёт);
проц устпам16(ук укз, бкрат данные, т_мера счёт);
проц устпам32(ук укз, бцел данные, т_мера счёт);
проц устпам64(ук укз, дим данные, т_мера счёт);
проц устпам128(ук укз, m128 данные, т_мера счёт);

проц копирпам8(ук p, кук q, т_мера счёт);
проц копирпам16(ук p, кук q, т_мера счёт);
проц копирпам32(ук p, кук q, т_мера счёт);
проц копирпам64(ук p, кук q, т_мера счёт);
проц копирпам128(ук p, кук q, т_мера счёт);

бул равнпам8(кук p, кук q, т_мера счёт);
бул равнпам16(кук p, кук q, т_мера счёт);
бул равнпам32(кук p, кук q, т_мера счёт);
бул равнпам64(кук p, кук q, т_мера счёт);
бул равнпам128(кук p, кук q, т_мера счёт);

т_хэш хэшпам(кук укз, т_мера счёт);

проц заполни(сим *t, кткст0 lim, const сим& x);
проц заполни(байт *t, const байт *lim, const байт& x);
проц заполни(ббайт *t, const ббайт *lim, const ббайт& x);

проц копируй(сим *dst, кткст0 ист, кткст0 lim);
проц копируй(байт *dst, const байт *ист, const байт *lim);
проц копируй(ббайт *dst, const ббайт *ист, const ббайт *lim);

бул  пусто_ли(const цел& i);
бул  пусто_ли(const дол& i) ;
бул  пусто_ли(const дво& r);
бул  пусто_ли(const бул& r  );

цел сравниЗнак(const сим& a, const сим& b);
цел сравниЗнак(const байт& a, const байт& b);
цел сравниЗнак(const ббайт& a, const ббайт& b) ;
цел сравниЗнак(const крат& a, const крат& b);
цел сравниЗнак(const бкрат& a, const бкрат& b);
цел сравниЗнак(const цел& a, const цел& b);
цел сравниЗнак(const бцел& a, const бцел& b);
цел сравниЗнак(const long& a, const long& b) ;
цел сравниЗнак(const unsigned long& a, const unsigned long& b);
цел сравниЗнак(const бул& a, const бул& b);
цел сравниЗнак(const дол& a, const дол& b) ;
цел сравниЗнак(const бдол& a, const бдол& b)  ;
цел сравниЗнак(const плав& a, const плав& b) ;
цел сравниЗнак(const дво& a, const дво& b)    ;

unsigned Pow2Bound(unsigned i);
unsigned PrimeBound(unsigned i);

т_хэш дайХэшЗнач(const сим& a) ;
т_хэш дайХэшЗнач(const байт& a) ;
т_хэш дайХэшЗнач(const ббайт& a);
т_хэш дайХэшЗнач(const крат& a) ;
т_хэш дайХэшЗнач(const бкрат& a);
т_хэш дайХэшЗнач(const цел& a) ;
т_хэш дайХэшЗнач(const бцел& a) ;
т_хэш дайХэшЗнач(const long& a)  ;
т_хэш дайХэшЗнач(const unsigned long& a);
т_хэш дайХэшЗнач(const бул& a);
т_хэш дайХэшЗнач(const wchar_t& a) ;
т_хэш дайХэшЗнач(const дол& a);
т_хэш дайХэшЗнач(const бдол& a);
т_хэш дайХэшЗнач(const дво& a) ;
т_хэш дайХэшЗнач(const плав& a) ;
т_хэш дайХэшЗначУкз(кук a) ;

ук разместиПамПерманентно(т_мера size);

ук разместиПамТн(т_мера& size);
ук разместиПам(т_мера size);
проц  освободиПам(ук укз);
ук разместиПам32();
проц  освободиПам32(ук укз);
проц  проверьПам();
проц  MemoryDumpLarge();
проц  MemoryDumpHuge();
цел   MemoryUsedKb();
цел   MemoryUsedKbMax();
проц  MemoryLimitKb(цел kb);

т_мера дайРазмБлокаПам(ук укз);
бул  пробуйПереместПам(ук укз, т_мера& newsize);

проц  остановТчкПам(бцел serial);

проц  диагнозИницПам();
проц  MemoryDumpLeaks();

проц  MemoryIgnoreLeaksBegin();
проц  MemoryIgnoreLeaksEnd();
проц  MemoryCheckDebug();

ук разместиТини(цел size);
проц освободиТини(цел size, ук укз);

бцел MemoryGetCurrentSerial();

проц  MemoryIgnoreNonMainLeaks();
проц  MemoryIgnoreNonUppThreadsLeaks();


бцел номерТипаЗнач(const цел*) ;
бцел номерТипаЗнач(const дол*) ;
бцел номерТипаЗнач(const дво*) ;
бцел номерТипаЗнач(const бул*)   ;
бцел номерТипаЗнач(const Ткст*)  ;
бцел номерТипаЗнач(const ШТкст*) ;
бцел номерТипаЗнач(const Дата*)   ;
бцел номерТипаЗнач(const Время*)    ;
бцел номерТипаЗнач(const Значение*)  ;

цел длинтекс8(кткст0 s);
цел длинтекс16(const сим16 *s);
цел длинтекс32(const шим *s);

#ifdef PLATFORM_POSIX
цел stricmp(кткст0 a, кткст0 b) ;
цел strnicmp(кткст0 a, кткст0 b, цел n);
#endif

#ifdef PLATFORM_WINCE
цел stricmp(кткст0 a, кткст0 b);
цел strnicmp(кткст0 a, кткст0 b, цел n) ;
#endif

цел длинтекс__(кткст0 s) ;
цел длинтекс__(const шим *s) ;

цел сравнзн__(сим x);
цел сравнзн__(шим x);

цел найди(кткст0 text, цел len, кткст0 needle, цел nlen, цел from);
цел найди(const шим *text, цел len, const шим *needle, цел nlen, цел from);

std::string вСтдстр(const Ткст& s);
бул  пустой(const Ткст& s);
бул  пустой(const ШТкст& s);
Ткст фмтУк(кук p);
цел сравнилюб(const Ткст& a, const Ткст& b);
цел сравнилюб(const Ткст& a, кткст0 b);
Ткст обрежьЛево(const Ткст& s);
Ткст обрежьПраво(const Ткст& s);
Ткст обрежьОба(const Ткст& s);
Ткст обрежьЛево(кткст0 prefix, цел len, const Ткст& s);
ШТкст обрежьЛево(const ШТкст& str);
ШТкст обрежьПраво(const ШТкст& s);
цел сравнилюб(const ШТкст& a, const ШТкст& b);
цел сравнилюб(const ШТкст& a, const шим *b);
unsigned ctoi(цел c);

цел СимФильтрАски(цел c);
цел СимФильтрАски128(цел c);
цел СимФильтрЮникод(цел c);
цел СимФильтрЦифра(цел c);
цел СимФильтрПробел(цел c);
цел СимФильтрНеПробел(цел c);
цел СимФильтрАльфа(цел c);
цел СимФильтрВзаг(цел c);
цел СимФильтрВпроп(цел c);
цел СимФильтрВзагАски(цел c);
цел СимФильтрАльфаВзаг(цел c);
цел СимФильтрАльфаВпроп(цел c);
цел СимФильтрЦел(цел c);
цел СимФильтрДво(цел c);
цел СимФильтрДефолтВзагАски(цел c);
цел СимФильтрВкЗс(цел c);
цел СимФильтрНетВкЗс(цел c);
Ткст фильтруй(кткст0 s, цел (*фильтр)(цел));
Ткст фмльтруйПока(кткст0 s, цел (*фильтр)(цел));

ШТкст фильтруй(const шим *s, цел (*фильтр)(цел));
ШТкст фмльтруйПока(const шим *s, цел (*фильтр)(цел));

цел регистрируйНомТипа__(кткст0 тип);

////////////////////////////////
//App.h

Ткст  дайСреду(кткст0 ид);

Ткст  дайФПутьИсп();
Ткст  дайТитулИсп();
Ткст  дайПапкуИсп();
Ткст  дайФайлИзПапкиИсп(кткст0 fp);

#ifdef PLATFORM_COCOA
Ткст дайПапкуПрил();
#endif

Ткст дайИмяПрил();
проц устИмяАпп(const Ткст& имя);

Ткст  дайФайлИзДомПапки(кткст0 fp);
Ткст  дайДомПапку();

проц    устДомПапку(кткст0 dir);

проц    используйКонфигДомПапки(бул b = true);

Ткст  дайВремПапку();
Ткст  времФайл(кткст0 имяф);

Ткст  дайКонфигПапку();
Ткст  конфигФайл(кткст0 file);
Ткст  конфигФайл();

проц    устКонфигГруппу(кткст0 группа);
Ткст  дайКонфигГруппу();

Ткст дайАргз0();

проц    устКодВыхода(цел код_);
цел     дайКодВыхода();

бул    главнаяПущена();

struct ИсклВыхода {};

проц выход(цел код_ = 1);

проц выходПрил__();
проц выполниПрил__(проц (*app)());

#ifdef PLATFORM_WIN32

проц иницПрил__(цел argc, кткст0 *argv);
проц иницПрилСреду__();

#define ГЛАВНАЯ_КОНСОЛЬН_ПРИЛ \
проц главФнКонсоли_(); \
 \
цел main(цел argc, сим *argv[]) { \
	иницПрил__(argc, (кткст0 *)argv); \
	выполниПрил__(главФнКонсоли_); \
	выходПрил__(); \
	return дайКодВыхода(); \
} \
 \
проц главФнКонсоли_()

#endif

#ifdef PLATFORM_POSIX

проц иницПрил__(цел argc, кткст0 *argv, кткст0 *envptr);

#define ГЛАВНАЯ_КОНСОЛЬН_ПРИЛ \
проц главФнКонсоли_(); \
 \
цел main(цел argc, кткст0 *argv, кткст0 *envptr) { \
	иницПрил__(argc, argv, envptr); \
	выполниПрил__(главФнКонсоли_); \
	выходПрил__(); \
	return дайКодВыхода(); \
} \
 \
проц главФнКонсоли_()

#endif

Ткст  дайФайлДан(кткст0 имяф);
Ткст  загрузиФайлДан(кткст0 имяф);
проц    устПутьДан(кткст0 path);

проц    запустиВебБраузер(const Ткст& url);

Ткст дайИмяКомпа();
Ткст дайИмяПользователя();
Ткст дайМенеджерРабСтола();

Ткст дайПапкуРабСтола();
Ткст дайПапкуПрограм();
#ifdef PLATFORM_WIN32
Ткст дайПапкуПрограмХ86();
#endif
Ткст дайПапкуДанныхПрил();
Ткст дайПапкуМузыки();
Ткст дайПапкуФото();
Ткст дайПапкуВидео();
Ткст дайПапкуДокументов();
Ткст дайПапкуШаблонов();
Ткст дайПапкуЗагрузок();

шим читайСуррогПару(const сим16 *s, const сим16 *lim);
шим достаньУтф8(кткст0 &s, кткст0 lim, бул& ok);
бцел достаньУтф8(кткст0 &s, бул& ok);
бул   проверьУтф8(кткст0 s, цел len);
цел    длинаУтф8(const шим *s, цел len);
цел    длинаУтф8(const сим16 *s, цел len);
проц   вУтф8(сим *t, const шим *s, цел len);
Ткст вУтф8(const шим *s, цел len);
проц   вУтф8(сим *t, const сим16 *s, цел len);
Ткст вУтф8(const сим16 *s, цел len);
цел длинаУтф16(const шим *s, цел len);
цел длинаУтф16(кткст0 s, цел len);
цел вУтф16(сим16 *t, const шим *s, цел len);
цел вУтф16(сим16 *t, кткст0 s, цел len);

цел     длинаУтф32(const сим16 *s, цел len);
цел    длинаУтф32(кткст0 s, цел len);
проц           вУтф32(шим *t, const сим16 *s, цел len);
ШТкст        вУтф32(const сим16 *s, цел len);
проц           вУтф32(шим *t, кткст0 s, цел len);
ШТкст        вУтф32(кткст0 s, цел len);
цел           декомпонируйЮникод(шим codepoint, шим t[MAX_DECOMPOSED], бул only_canonical = false);
ШТкст       декомпонируйЮникод(шим codepoint, бул only_canonical = false);
шим         компонируйЮникод(const ШТкст& t);

проц  устДефНабСим(ббайт charset);
ббайт  дайДефНабСим();
ббайт  разрешиНабСим(ббайт charset);
ббайт  добавьНабСим(кткст0 имя, const бкрат *table);
ббайт  добавьНабСимЕ(кткст0 имя, бкрат *table);
кткст0 имяНабСим(ббайт charset);
цел счётНабСим();
цел набсимПоИмени(кткст0 имя);
проц преобразуйНабСим(сим *t, ббайт tcharset, кткст0 s, ббайт scharset, цел n);
Ткст  вНабсим(ббайт charset, const Ткст& s, ббайт scharset = ДЕФНАБСИМ, цел defchar = ДЕФСИМ);
шим ToUpperRest_(шим c);
шим ToLowerRest_(шим c);
сим  ToAsciiRest_(шим c);
бул  IsRTL_(шим c);
бул  IsMark_(шим c);
бул  IsLetter_(шим c);
бул  IsUpper_(шим c);
бул  IsLower_(шим c);

Ткст утф8ВАски(const Ткст& ист);
Ткст утф8ВАскиЗаг(const Ткст& ист);
Ткст утф8ВАскиПроп(const Ткст& ист);

проц взаг(сим16 *t, const сим16 *s, цел len);
проц впроп(сим16 *t, const сим16 *s, цел len);
проц вАски(сим16 *t, const сим16 *s, цел len);

проц взаг(сим16 *s, цел len);
проц впроп(сим16 *s, цел len);
проц вАски(сим16 *s, цел len);
бул IsDoubleWidth(цел c);

бул буква_ли(цел c, ббайт charset);
бул проп_ли(цел c, ббайт charset);
бул заг_ли(цел c, ббайт charset);
цел  взаг(цел c, ббайт charset);
цел  впроп(цел c, ббайт charset);
цел  вАски(цел c, ббайт charset);

проц взаг(сим *t, кткст0 s, цел len, ббайт charset = ДЕФНАБСИМ);
проц впроп(сим *t, кткст0 s, цел len, ббайт charset = ДЕФНАБСИМ);
проц вАски(сим *t, кткст0 s, цел len, ббайт charset = ДЕФНАБСИМ);

проц взаг(сим *s, цел len, ббайт charset = ДЕФНАБСИМ);
проц впроп(сим *s, цел len, ббайт charset = ДЕФНАБСИМ);
проц вАски(сим *s, цел len, ббайт charset = ДЕФНАБСИМ);

ШТкст иницШапки(const шим *s);
ШТкст иницШапки(const ШТкст& s);
ШТкст взаг(const ШТкст& w);
ШТкст впроп(const ШТкст& w);
ШТкст вАски(const ШТкст& w);

Ткст  иницШапки(кткст0 s, ббайт charset = ДЕФНАБСИМ);
Ткст  взаг(const Ткст& s, ббайт charset = ДЕФНАБСИМ);
Ткст  впроп(const Ткст& s, ббайт charset = ДЕФНАБСИМ);
Ткст  вАски(const Ткст& s, ббайт charset = ДЕФНАБСИМ);
Ткст  вАскиЗаг(const Ткст& s, ббайт charset = ДЕФНАБСИМ);
Ткст  вАскиПроп(const Ткст& s, ббайт charset = ДЕФНАБСИМ);

Ткст  взаг(кткст0 s, ббайт charset = ДЕФНАБСИМ);
Ткст  впроп(кткст0 s, ббайт charset = ДЕФНАБСИМ);
Ткст  вАски(кткст0 s, ббайт charset = ДЕФНАБСИМ);

ШТкст загрузиМПБПотокаШ(Поток& in, ббайт def_charset);
ШТкст загрузиМПБПотокаШ(Поток& in);
Ткст  загрузиМПБПотока(Поток& in, ббайт def_charset);
Ткст  загрузиМПБПотока(Поток& in);
ШТкст загрузиМПБФайлаШ(кткст0 path, ббайт def_charset);
ШТкст загрузиМПБФайлаШ(кткст0 path);
Ткст  загрузиМПБФайла(кткст0 path, ббайт def_charset);
Ткст  загрузиМПБФайла(кткст0 path);
бул    сохраниМПБПотока(Поток& out, const ШТкст& данные);
бул    сохраниМПБФайла(кткст0 path, const ШТкст& данные);
бул    сохраниМПБПотокаУтф8(Поток& out, const Ткст& данные);
бул    сохраниМПБФайлаУтф8(кткст0 path, const Ткст& данные);

бул    естьМпбУтф8(Поток& in);

ШТкст вЮникод(const Ткст& ист, ббайт charset);
ШТкст вЮникод(кткст0 ист, цел n, ббайт charset);
Ткст  изБуфераЮникода(const шим *ист, цел len, ббайт charset = ДЕФНАБСИМ, цел defchar = ДЕФСИМ);
Ткст  изБуфераЮникода(const шим *ист);
Ткст  изЮникода(const ШТкст& ист, ббайт charset = ДЕФНАБСИМ, цел defchar = ДЕФСИМ);

цел  вЮникод(цел chr, ббайт charset);
цел  изЮникода(шим wchr, ббайт charset, цел defchar = ДЕФСИМ);

 бул ведущийУтф8_ли(цел c);
 шим достаньУтф8(кткст0 &s, кткст0 lim) ;
 шим достаньУтф8(кткст0 &s) ;
 бул   проверьУтф8(кткст0 s) ;
 бул   проверьУтф8(const Ткст& s) ;
 цел    длинаУтф8(const шим *s);
 цел    длинаУтф8(шим код_);
 цел    длинаУтф8(const ШТкст& s);
 цел    длинаУтф8(const сим16 *s) ;


 Ткст вУтф8(const шим *s);
 Ткст вУтф8(шим код_);
 Ткст вУтф8(const ШТкст& s);

 Ткст вУтф8(const сим16 *s) ;


 цел длинаУтф16(const шим *s);
 цел длинаУтф16(const ШТкст& s);
 цел длинаУтф16(шим код_);
 цел длинаУтф16(кткст0 s);
 цел длинаУтф16(const Ткст& s) ;

  цел длинаУтф32(const сим16 *s) ;


 цел длинаУтф32(кткст0 s);
 цел длинаУтф32(const Ткст& s) ;

 ШТкст вУтф32(const сим16 *s) ;

 ШТкст вУтф32(кткст0 s);
 ШТкст вУтф32(const Ткст& s);

 шим взаг(шим c);
 шим впроп(шим c) ;
 сим  вАски(шим c) ;
 сим  вАскиЗаг(шим c);
 сим  вАскиПроп(шим c);
 бул  заг_ли(шим c);
 бул  проп_ли(шим c);
 бул  буква_ли(шим c) ;

 бул слеванаправо(шим c);
 бул метка_ли(шим c);

 бул буква_ли(цел c);
 бул проп_ли(цел c);
 бул заг_ли(цел c) ;
 цел  взаг(цел c) ;
 цел  впроп(цел c) ;
 сим вАски(цел c) ;
 сим вАскиЗаг(цел c) ;
 сим вАскиПроп(цел c);

 бул  буква_ли(сим c) ;
 бул  проп_ли(сим c);
 бул  заг_ли(сим c) ;
 шим взаг(сим c);
 шим впроп(сим c) ;
 сим  вАски(сим c) ;
 сим  вАскиЗаг(сим c)  ;
 сим  вАскиПроп(сим c) ;

 бул  буква_ли(байт c) ;
 бул  проп_ли(байт c) ;
 бул  заг_ли(байт c) ;
 шим взаг(байт c) ;
 шим впроп(байт c) ;
 сим  вАски(байт c) ;
 сим  вАскиЗаг(байт c) ;
 сим  вАскиПроп(байт c)  ;

 бул  буква_ли(сим16 c)   ;
 бул  проп_ли(сим16 c);
 бул  заг_ли(сим16 c) ;
 шим взаг(сим16 c) ;
 шим впроп(сим16 c)  ;
 сим  вАски(сим16 c)  ;
 сим  вАскиЗаг(сим16 c) ;
 сим  вАскиПроп(сим16 c)  ;

 бул цифра_ли(цел c);
 бул альфа_ли(цел c);
 бул алчис_ли(цел c) ;
 бул чисЛэ_ли(цел c) ;
 бул пункт_ли(цел c)  ;
 бул пробел_ли(цел c);
 бул цифраикс_ли(цел c);
 
Ткст обрежьЛево(кткст0 prefix, const Ткст& s);
Ткст обрежьЛево(const Ткст& prefix, const Ткст& s);
Ткст обрежьПраво(кткст0 suffix, цел len, const Ткст& s);
Ткст обрежьПраво(кткст0 suffix, const Ткст& s);
Ткст обрежьПраво(const Ткст& suffix, const Ткст& s);

цел сравнилюб(const шим *a, const ШТкст& b);
цел сравнилюб(кткст0 a, const Ткст& b);

Ткст загрузиПоток(Поток& in);
бул   сохраниПоток(Поток& out, const Ткст& данные);
Поток& обнулиПоток();
дол копируйПоток(Поток& приёмник, Поток& ист, дол count = ЦЕЛ64_МАКС);

Ткст загрузиФайл(кткст0 имяф);
бул   сохраниФайл(кткст0 имяф, const Ткст& данные);

Поток& пакуй16(Поток& s, цел& i);
Поток& пакуй16(Поток& s, цел& i1, цел& i2);
Поток& пакуй16(Поток& s, цел& i1, цел& i2, цел& i3);
Поток& пакуй16(Поток& s, цел& i1, цел& i2, цел& i3, цел& i4);
Поток& пакуй16(Поток& s, цел& i1, цел& i2, цел& i3, цел& i4, цел& i5);

цел     StreamHeading(Поток& stream, цел ver, цел minver, цел maxver, const сим* tag);

проц    мд5(ббайт *hash16, кук данные, бцел size);
проц    мд5(ббайт *hash16, const Ткст& данные);
Ткст  мд5Ткст(кук данные, бцел size);
Ткст  мд5Ткст(const Ткст& данные);
Ткст  мд5ПТкст(кук данные, бцел size);
Ткст  мд5ПТкст(const Ткст& данные);

проц    ша1(ббайт *hash20, кук данные, бцел size);
проц    ша1(ббайт *hash20, const Ткст& s);
Ткст  ша1Ткст(кук данные, бцел size);
Ткст  ша1Ткст(const Ткст& данные);
Ткст  ша1ПТкст(кук данные, бцел size);
Ткст  ша1ПТкст(const Ткст& данные);

проц    ша256(ббайт *hash32, кук данные, бцел size);
проц    ша256(ббайт *hash32, const Ткст& s);
Ткст  ша256Ткст(кук данные, бцел size);
Ткст  ша256Ткст(const Ткст& данные);
Ткст  ша256ПТкст(кук данные, бцел size);
Ткст  ша256ПТкст(const Ткст& данные);

цел ххХэш(кук данные, т_мера len);
цел ххХэш(const Ткст& s);

дол ххХэш64(кук данные, т_мера len);
дол ххХэш64(const Ткст& s);

бул високосенГод(цел year);

цел  дайДниМесяца(цел month, цел year);

цел  деньНедели(Дата date);
Дата последнДеньМесяца(Дата d);
Дата первДеньМесяца(Дата d);
Дата последнДеньГода(Дата d);
Дата первДеньГода(Дата d);
цел  деньГода(Дата d);

Дата добавьМесяцы(Дата date, цел months);
цел  дайМесяцы(Дата since, Дата till);
цел  GetMonthsP(Дата since, Дата till);
Дата добавьГоды(Дата date, цел years);

Дата дайДатуНедели(цел year, цел week);
цел  дайНеделю(Дата d, цел& year);

Дата пасха(цел year);

Дата дайСисДату();

Ткст имяДня(цел i, цел lang = 0);
Ткст имяДняГода(цел i, цел lang = 0);
Ткст имяМесяца(цел i, цел lang = 0);
Ткст имяМес(цел i, цел lang = 0);

проц   устФорматДаты(кткст0 fmt);
проц   устСканДат(кткст0 scan);
проц   устФильтрДат(кткст0 seps);

кткст0 тктВДату(Дата& d, кткст0 s, Дата опр);
кткст0 тктВДату(Дата& d, кткст0 s);

Ткст        фмт(Дата date);
цел         CharFilterDate(цел c);

Время  дайСисВремя();
Время  дайВремяУВИ();//УВИ - Универсальное времяисчисление (UTC)

Ткст фмт(Время time, бул seconds = true);
кткст0 тктВоВремя(кткст0 datefmt, Время& d, кткст0 s);
кткст0 тктВоВремя(Время& d, кткст0 s);

бул устСисВремя(Время time); // only root/sysadmin can do this...

цел    дайЧПояс();
Ткст дайТкстЧПояса();
цел    сканТкстЧПояса(кткст0 s);
цел    сканЧПояс(кткст0 s);

цел   GetLeapSeconds(Дата dt);
дол дайСекундыУви(Время tm);
Время  времяИзУВИ(дол seconds);

проц     StdLogSetup(бцел options, кткст0 filepath = NULL,
                     цел filesize_limit = 10 * 1024 * 1024);
Поток&  StdLog();

Ткст   GetStdLogPath();

Поток&  UppLog();
проц     SetUppLog(Поток& log);

фнСтрокиЛога SetUppLog(фнСтрокиЛога log_line);

Поток&  VppLog();
проц     SetVppLog(Поток& log);

проц     SetVppLogName(const Ткст& file);
проц     SetVppLogSizeLimit(цел limit);
проц     SetVppLogNoDeleteOnStartup();

проц     гексДампДанных(Поток& s, кук укз, цел size, бул adr, цел maxsize);
проц     гексДамп(Поток& s, кук укз, цел size, цел maxsize = INT_MAX);

проц     логГекс(const Ткст& s);
проц     логГекс(const ШТкст& s);
проц     логГекс(бдол i);
проц     логГекс(ук p);

проц     устМагию(ббайт *t, цел count);
проц     проверьМагию(ббайт *t, цел count);

Ткст        дайИмяТипа(кткст0 type_name);

// Crash support

проц установиКрашДамп(кткст0 app_info = NULL);
проц устИмяКрашФайла(кткст0 cfile);
проц проверьЭталонЛога(кткст0 etalon_path);
проц проверьЭталонЛога();
Ткст какТкст(const ПрофильПамяти&);
Ткст разманглируйСиПП(const сим* имя);

#ifdef CPU_X86
Ткст какТкст(__m128i x);
#endif
проц  паникаВнеПамяти();

ук SysAllocRaw(т_мера size, т_мера reqsize);
проц  SysFreeRaw(ук укз, т_мера size);

кткст0 какТкст(цел i);
кткст0 какТкст(ук укз);
Ткст дайИмяТипа(const ::std::type_info& tinfo);
проц __LOGF__(кткст0 формат, ...);
цел LOG_ROTATE(цел x);
//////////////

Значение  разбериДжейсон(СиПарсер& p);
Значение  разбериДжейсон(кткст0 s);

Ткст какТкстСи(кткст0 s, кткст0 end, цел linemax = INT_MAX, кткст0 linepfx = NULL,
                 бцел flags = 0);
Ткст какТкстСи(кткст0 s, цел linemax = INT_MAX, кткст0 linepfx = NULL,
                 бцел flags = 0);
Ткст какТкстСи(const Ткст& s, цел linemax = INT_MAX, кткст0 linepfx = NULL,
                 бцел flags = 0);

Ткст какДжейсон(Время tm);
Ткст какДжейсон(Дата dt);

Ткст какДжейсон(const Значение& v, const Ткст& indent, бул pretty);
Ткст какДжейсон(const Значение& v, бул pretty = false);

Ткст какДжейсон(цел i);
Ткст какДжейсон(дво n);
Ткст какДжейсон(бул b);
Ткст какДжейсон(const Ткст& s);
Ткст какДжейсон(const ШТкст& s);
Ткст какДжейсон(кткст0 s);

Значение        значОш(кткст0 s);
Значение        значОш(const Ткст& s);
const Значение& значОш();

 бул номТипЗначПроц_ли(цел q);
 бул номТипЗначОш_ли(цел q);
 бул номТипЗначТкст_ли(цел q) ;

 бул номТипЗначЦел_ли(цел q) ;
 бул номТипЗначПлав_ли(цел q);

 бул номТипЗначЧисло_ли(цел q) ;
 бул номТипЗначДатаВремя_ли(цел q);

 бул проц_ли(const Значение& v) ;
 бул ошибка_ли(const Значение& v) ;
 бул ткст_ли(const Значение& v)    ;
 бул число_ли(const Значение& v);
 бул датаВремя_ли(const Значение& v);
 бул массивЗнач_ли(const Значение& v);
 бул мапЗнач_ли(const Значение& v)   ;

Ткст      дайТекстОш(const Значение& v);

 бул          пусто_ли(const Значение& v);
 const Значение&  Nvl(const Значение& a, const Значение& b) ;

 бул          нч_ли(const Значение& v);
 
 КЗСА обнулиКЗСА();

//#ifndef PLATFORM_WIN32
 цел        дайЗнК(бцел c);
 цел        дайЗнЗ(бцел c) ;
 цел        дайЗнС(бцел c);
 бцел      дайКЗС(ббайт r, ббайт g, ббайт b) ;
//#endif
 Цвет прямойЦвет(КЗСА rgba) ;
 т_хэш   дайХэшЗнач(Цвет c);
 Цвет    Nvl(Цвет a, Цвет b);

 Цвет серыйЦвет(цел a = 128);

 Цвет чёрный();
 Цвет серый();
 Цвет светлоСерый() ;
 Цвет белоСерый() ;
 Цвет белый();

 Цвет красный();
 Цвет зелёный();
 Цвет коричневый() ;
 Цвет синий() ;
 Цвет магента() ;
 Цвет цыан()  ;
 Цвет жёлтый() ;
 Цвет светлоКрасный()  ;
 Цвет светлоЗелёный() ;
 Цвет светлоЖёлтый()  ;
 Цвет светлоСиний() ;
 Цвет светлоМагента();
 Цвет светлоЦыан();

проц   RGBtoHSV(дво r, дво g, дво b, дво& h, дво& s, дво& v);
проц   HSVtoRGB(дво h, дво s, дво v, дво& r, дво& g, дво& b);

Цвет  HsvColorf(дво h, дво s, дво v);

проц   CMYKtoRGB(дво c, дво m, дво y, дво k, дво& r, дво& g, дво& b);
проц   RGBtoCMYK(дво r, дво g, дво b, дво& c, дво& m, дво& y, дво& k);

Цвет  CmykColorf(дво c, дво m, дво y, дво k = 0);

Цвет  смешай(Цвет c1, Цвет c2, цел alpha = 128);

Ткст цветВГЯР(Цвет color);
Цвет  цветИзТекста(кткст0 s);

цел  Grayscale(const Цвет& c);
бул тёмен(Цвет c);
бул светел(Цвет c);

Цвет тёмнаяТема(Цвет c);
Цвет тёмнаяТемаИзКэша(Цвет c);

дво абс(const Комплекс& c);
const Комплекс& Nvl(const Комплекс& a, const Комплекс& b);
бул нч_ли(const Комплекс& x);
бул беск_ли(const Комплекс& x);
бул конечен(const Комплекс& x);

 const Ткст&  Nvl(const Ткст& a, const Ткст& b);
 цел            Nvl(цел a, цел b);
 дол          Nvl(дол a, дол b);
 дво         Nvl(дво a, дво b) ;
 Дата           Nvl(Дата a, Дата b) ;
 Время           Nvl(Время a, Время b);

 цел            Nvl(цел a);
 дол          Nvl(дол a);
 дво         Nvl(дво a) ;
 
цел сравниСтдЗнач(const Значение& a, const Значение& b, const ИнфОЯз& f);
цел сравниСтдЗнач(const Значение& a, const Значение& b, цел язык);
цел сравниСтдЗнач(const Значение& a, const Значение& b);

цел сравниДескСтдЗнач(const Значение& a, const Значение& b, const ИнфОЯз& f);
цел сравниДескСтдЗнач(const Значение& a, const Значение& b, цел язык);
цел сравниДескСтдЗнач(const Значение& a, const Значение& b);

Ткст&  рефТкст(Реф f) ;
ШТкст& рефШТкст(Реф f);
цел&     рефЦел(Реф f);
дол&   рефЦел64(Реф f) ;
дво&  рефДво(Реф f);
бул&    рефБул(Реф f);
Дата&    рефДата(Реф f);
Время&    рефВремя(Реф f);
Значение&   рефЗнач(Реф f) ;

цел сравниТксты(const Значение& a, const Значение& b, const ИнфОЯз& f); // used by StdCompareValue

КэшЛРУ<Значение>& дайКэшЗначений();
typedef КэшЛРУ<Значение>::Делец ДелецЗначения;

Значение сделайЗначение(ДелецЗначения& m);

бул активенКэшЗначений();

проц регулируйКэшЗначений();
проц сожмиКэшЗначений();

проц настройКэшЗначений(цел limit_low, цел limit_high, дво ratio);

unsigned      stou(кткст0 укз, ук endptr = NULL, unsigned radix = 10);
unsigned stou(const ббайт *укз, ук endptr = NULL, unsigned radix = 10);
unsigned      stou(const шим *укз, ук endptr = NULL, unsigned radix = 10);

бдол        stou64(кткст0 s, ук endptr = NULL, unsigned radix = 10);
бдол        stou64(const шим *s, ук endptr = NULL, unsigned radix = 10);

цел           сканЦел(const шим *укз, const шим **endptr = NULL, цел radix = 10);

цел           сканЦел(кткст0 укз, кткст0 *endptr, цел radix);
цел           сканЦел(кткст0 укз, кткст0 *endptr);
цел           сканЦел(кткст0 укз);

дол         сканЦел64(кткст0 укз, кткст0 *endptr, цел radix);
дол         сканЦел64(кткст0 укз, кткст0 *endptr);
дол         сканЦел64(кткст0 укз);

дво        сканДво(кткст0 укз, кткст0 *endptr, бул accept_comma);
дво        сканДво(const шим *укз, const шим **endptr, бул accept_comma);
дво        сканДво(кткст0 укз, кткст0 *endptr);
дво        сканДво(const шим *укз, const шим **endptr);
дво        сканДво(кткст0 укз);
дво        сканДво(const шим *укз);

дво        Atof(кткст0 s);

Значение       тктЦелЗнач(кткст0 s);

цел     тктЦел(const сим* s);
Ткст    целТкт(цел i);

дол   тктЦел64(кткст0 s);
Ткст    целТкт64(дол i);

дво  тктДво(const сим* s);
Ткст    двоТкт(дво d) ;

дво  целДво(цел i);
цел     двоЦел(дво d) ;

Значение       тктДвоЗнач(const сим* s);


Значение ОшибкаНеПусто();

const Преобр& стдПреобр();

Ткст стдФормат(const Значение& q);

const ПреобрЦел& стдПреобрЦел();
const ПреобрЦел& стдПреобрЦелНеПусто();

const ПреобрДво& стдПреобрДво();
const ПреобрДво& стдПреобрДвоНеПусто();

const ПреобрДату& стдПреобрДату();
const ПреобрДату& стдПреобрДатуНеПусто();

const ПреобрВремя& стдПреобрВремя();
const ПреобрВремя& стдПреобрВремяНеПусто();

const ПреобрТкст& стдПреобрТкст();
const ПреобрТкст& стдПреобрТкстНеПусто();

const КлассНеПреобр& NoConvert();
const КлассОшибкаПреобр& ошибкаПреобр();

Преобр& преобрЯЗ();

бцел  случ(бцел n);

цел utoa32(бцел значение, сим *буфер);
цел utoa64(бдол значение, сим *буфер);

Ткст фмтБцел(бцел w);
Ткст фмтЦел(цел i);
Ткст фмтБцел64(бдол w);
Ткст фмтЦел64(дол i);

Ткст         фмтЦелОснова(цел i, цел base, цел width = 0, сим lpad = ' ', цел sign = 0, бул upper = false);
Ткст         фмтЦелДес(цел i, цел width, сим lpad = ' ', бул always_sign = false);
Ткст         фмтЦелГекс(цел i, цел width = 8, сим lpad = '0');
Ткст         фмтЦелГексВерхРег(цел i, цел width = 8, сим lpad = '0');
Ткст         фмтЦелВосьм(цел i, цел width = 12, сим lpad = '0');
Ткст         фмтЦелРим(цел i, бул upper = false);
Ткст         фмтЦелАльфа(цел i, бул upper = true);
Ткст         фмт64Гекс(бдол a);

Ткст  фмтЦелГекс(кук укз);
Ткст  фмтГекс(кук укз);

ткст0 фмтЭ(сим *t, дво x, цел precision, бцел flags = FD_SPECIAL|FD_MINUS0|FD_SIGN_EXP);
Ткст фмтЭ(дво x, цел precision, бцел flags = FD_SPECIAL|FD_MINUS0|FD_SIGN_EXP);

сим *фмтФ(сим *t, дво x, цел precision, бцел flags = FD_SPECIAL|FD_MINUS0|FD_SIGN_EXP|FD_ZEROS);
Ткст фмтФ(дво x, цел precision, бцел flags = FD_SPECIAL|FD_MINUS0|FD_SIGN_EXP|FD_ZEROS);

сим *фмтГ(сим *t, дво x, цел precision, бцел flags = FD_SPECIAL|FD_MINUS0|FD_SIGN_EXP|FD_TOLERANCE(3));
Ткст фмтГ(дво x, цел precision, бцел flags = FD_SPECIAL|FD_MINUS0|FD_SIGN_EXP|FD_TOLERANCE(3));

сим *фмтДво(сим *t, дво x, цел precision, бцел flags = FD_TOLERANCE(6)|FD_MINIMAL_EXP|FD_SPECIAL);
Ткст фмтДво(дво x, цел precision, бцел flags = FD_TOLERANCE(6)|FD_MINIMAL_EXP|FD_SPECIAL);

ткст0 фмтДво(сим *t, дво x);
Ткст фмтДво(дво x);

Ткст фмтДвоЧ(дво x);

Ткст         фмтДата(Дата date, кткст0 формат, цел язык = 0);
Ткст         фмтВремя(Время time, кткст0 формат, цел язык = 0);

проц регФорматировщик(цел тип, кткст0 ид, Форматировщик f);
проц регФорматировщикПусто(кткст0 ид, Форматировщик f);
проц регФорматировщикЧисел(кткст0 ид, Форматировщик f);
проц регФорматировщикТекста(кткст0 ид, Форматировщик f);
проц регФорматировщикДатВремени(кткст0 ид, Форматировщик f);
проц регФорматировщикЗначений(кткст0 ид, Форматировщик f);

Ткст         фмтЦелое(цел a);
Ткст         фмт64(бдол a) ;

Ткст         фмтДвоФикс(дво x, цел digits);
Ткст         фмтДвоЭксп(дво x, цел digits) ;

Ткст фмтБцел(бцел w);
Ткст фмтЦел(цел i);

Ткст sДжейсонFile(кткст0 file);

#ifndef PLATFORM_WINCE
проц    CoutUTF8();
Поток& Cout();
Поток& Cerr();
Ткст  читайСтдВхо();
Ткст  ReadSecret();
проц    EnableEcho(бул b = true);
проц    DisableEcho();
#endif

дол usecs(дол prev = 0);
цел msecs(цел prev = 0);

проц   устХукНеудачаАссертации(проц (*h)(кткст0 ));

проц   перезагрузиФайлИни();
проц   устФайлИни(кткст0 path = NULL);
Ткст дайФайлИни();
Ткст дайКлючИни(кткст0 ид, const Ткст& опр);
Ткст дайКлючИни(кткст0 ид);

бул иниИзменён__(цел версия);

проц добавьИнфоИни(кткст0 ид, Ткст (*текущ)(), Ткст (*опр)(), кткст0 инфо);

const Массив<ИниИнфо>& дайИниИнфо();
Ткст дайИниИнфоФ();
Ткст дефолтнКонтентИниФайла();
Ткст текущКонтентИниФайла(бул comment_defaults);

цел     LNGFromText(кткст0 s);
Ткст  LNGAsText(цел d);

ббайт    GetLNGCharset(цел d);
цел     SetLNGCharset(цел lng, ббайт chrset);

проц                      устЯз(цел lang);
цел                       дайТекЯз();

проц                      устЯз(кткст0 s);
Ткст                    дайТекЯзТкст();

цел                       дайСисЯЗ();

ВекторМап<Ткст, Ткст> дайЯз(цел lang);//rename...
const цел                *дайВсеЯзы();

Ткст                    GetLangName(цел язык);
Ткст                    GetNativeLangName(цел язык);

Ткст                    txtGet(кткст0 ид, цел язык = ТЕКЯЗ);

проц                      ExportLNGtoT();

#ifdef PLATFORM_WIN32
LCID                      GetLanguageLCID(цел язык);
Ткст                    GetLocaleInfoA(LCID lcid, LCTYPE lctype);
ШТкст                   GetLocaleInfoW(LCID lcid, LCTYPE lctype);
#endif

const ИнфОЯз& дайИнфОЯз(цел lang);
const ИнфОЯз& дайИнфОЯз();

проц  устИнфОЯз(цел lang, const ИнфОЯз& lf);

оц добавьЯзМодуль(кткст0 file, кткст0 modulename, цел masterlang, const LangModuleRecord *module);
проц добавьЯз(кткст0 modulename, цел lang, const LangTextRecord *langtext);

проц SyncLngInfo__();


ВекторМап<Ткст, Ткст> загрузиИниПоток(Поток &in);
ВекторМап<Ткст, Ткст> загрузиИниФайл(кткст0 filename);

Ткст времяФмт(дво second);

Ткст кодируйГекс(const ббайт *s, цел count, цел sep = INT_MAX, цел sepchr = ' ');
Ткст кодируйГекс(кткст0 s, цел count, цел sep = INT_MAX, цел sepchr = ' ');
Ткст кодируйГекс(кук s, цел count, цел sep = INT_MAX, цел sepchr = ' ');
Ткст кодируйГекс(const Ткст& s, цел sep = INT_MAX, цел sepchr = ' ');

Ткст декодируйГекс(кткст0 s, кткст0 lim);
Ткст декодируйГекс(кткст0 s, цел len);
Ткст декодируйГекс(const Ткст& s);

Ткст  вСисНабсим(const Ткст& ист, цел cp);
Ткст  вСисНабсим(const Ткст& ист);
Ткст  изНабсимаВин32(const Ткст& ист, цел cp);
Ткст  изСисНабсима(const Ткст& ист);

Вектор<сим16> вСисНабсимШ(const ШТкст& ист);
Вектор<сим16> вСисНабсимШ(const Ткст& ист);
Вектор<сим16> вСисНабсимШ(const шим *ист);
Вектор<сим16> вСисНабсимШ(кткст0 ист);

Ткст         изСисНабсимаШ(const сим16 *ист);

#ifdef PLATFORM_WIN32
Ткст изНабсимаОЕМ(const Ткст& ист);
Ткст дайОшСооб(бцел dwError);
#endif

#ifdef PLATFORM_POSIX
цел GetLastError();
Ткст дайОшСооб(цел errorno);
#endif

Ткст дайПоследнОшСооб();

проц   бипИнформация();
проц   бипВосклицание();
проц   бипВопрос();
проц   бипОшибка();


проц памустХ(ук t, кук элт, цел item_size, цел count);

сим *перманентнаяКопия(кткст0 s);

цел памсравнИ(кук приёмник, кук ист, цел count);

Ткст нормализуйПробелы(кткст0 s);
Ткст нормализуйПробелы(кткст0 begin, кткст0 end);

Ткст         CsvString(const Ткст& text);
Вектор<Ткст> GetCsvLine(Поток& s, цел separator, ббайт charset);

Ткст         сожмиЛог(кткст0 s);

бцел   случ();
бцел   случ(бцел n);
бдол  случ64();
бдол  случ64(бдол n);
проц    случ64(бдол *t, цел n);
дво  случПЗ();

проц  засейСлуч(бцел *seed, цел len);
проц  засейСлуч(бцел seed);
проц  засейСлуч();


// Math utils

дво  sqr          (дво a);
дво  argsinh      (дво s);
дво  argcosh      (дво c);
дво  argtanh      (дво t);

цел            iscale(цел x, цел y, цел z);
цел            iscalefloor(цел x, цел y, цел z);
цел            iscaleceil(цел x, цел y, цел z);
цел            idivfloor(цел x, цел y);
цел            idivceil(цел x, цел y);
цел            itimesfloor(цел x, цел y);
цел            itimesceil(цел x, цел y);

цел            fround(дво x);
цел            ffloor(дво x);
цел            fceil(дво x);

дол          fround64(дво x);
дол          ffloor64(дво x);
дол          fceil64(дво x);

Ткст         какТкст(дво x, цел nDigits);
дво         modulo(дво x, дво y);

цел            ilog10       (дво d);
дво         ipow10       (цел i);
дво         normalize    (дво d, цел& exponent);

дво         roundr       (дво d, цел digits);
дво         floorr       (дво d, цел digits);
дво         ceilr        (дво d, цел digits);

цел SolveQuadraticEquation(дво A, дво B, дво C, дво *r);

цел  InScListIndex(кткст0 s, кткст0 list);
бул InScList(кткст0 s, кткст0 list);

т_хэш дайХэшЗнач(Дата t) ;

бул operator==(Дата a, Дата b);
бул operator<(Дата a, Дата b);

цел   operator-(Дата a, Дата b);
Дата  operator+(Дата a, цел b);
Дата  operator+(цел a, Дата b);
Дата  operator-(Дата a, цел b);
Дата& operator+=(Дата& a, цел b);
Дата& operator-=(Дата& a, цел b);

Время воВремя(const Дата& d) ;
т_хэш дайХэшЗнач(Время t);

бул operator==(Время a, Время b);
бул operator<(Время a, Время b);

дол  operator-(Время a, Время b);
Время   operator+(Время a, дол seconds);
Время   operator+(дол seconds, Время a);
Время   operator-(Время a, дол secs);
Время&  operator+=(Время& a, дол secs);
Время&  operator-=(Время& a, дол secs);

Время   operator+(Время a, цел i);
Время   operator-(Время a, цел i);
Время&  operator+=(Время& a, цел i) ;
Время&  operator-=(Время& a, цел i);

Время   operator+(Время a, дво i);
Время   operator-(Время a, дво i);
Время&  operator+=(Время& a, дво i) ;
Время&  operator-=(Время& a, дво i);

Поток& operator%(Поток& s, КЗСА& c);

бул operator==(const КЗСА& a, const КЗСА& b);
бул operator!=(const КЗСА& a, const КЗСА& b);

КЗСА operator*(цел alpha, Цвет c);

бул operator==(const Значение& v, Цвет x);
бул operator==(Цвет x, const Значение& v);
бул operator!=(const Значение& v, Цвет x);
бул operator!=(Цвет x, const Значение& v);

бул operator==(const Значение& v, Цвет (*x)());
бул operator==(Цвет (*x)(), const Значение& v);
бул operator!=(const Значение& v, Цвет (*x)()) ;
бул operator!=(Цвет (*x)(), const Значение& v) ;

бул operator==(Цвет c, Цвет (*x)());
бул operator==(Цвет (*x)(), Цвет c);
бул operator!=(Цвет c, Цвет (*x)()) ;
бул operator!=(Цвет (*x)(), Цвет c);

 const Вектор<Ткст>& комСтрока();
 const ВекторМап<Ткст, Ткст>& систСреда();
 Вектор<сим16> вУтф16(const шим *s, цел len);
 Вектор<сим16> вУтф16(кткст0 s, цел len);
 цел    длинаУтф8(const Вектор<сим16>& s) ;
 Ткст вУтф8(const Вектор<сим16>& s);
 Вектор<сим16> вУтф16(const шим *s);
 Вектор<сим16> вУтф16(const ШТкст& s);
 Вектор<сим16> вУтф16(шим код_);

 Вектор<сим16> вУтф16(кткст0 s);
 Вектор<сим16> вУтф16(const Ткст& s);
 цел длинаУтф32(const Вектор<сим16>& s);
 ШТкст вУтф32(const Вектор<сим16>& s) ;

кткст0 тктВДату(кткст0 fmt, Дата& d, кткст0 s, Дата опр = Null);
Дата        сканДату(кткст0 fmt, кткст0 s, Дата опр = Null);
Дата        сканДату(кткст0 s, Дата опр = Null);
Время        сканВремя(кткст0 datefmt, кткст0 s, Время опр = Null);
Время        сканВремя(кткст0 s, Время опр = Null);

Значение скан(бцел stdtype, const Ткст& text, const Значение& опр = Null, бул *hastime = NULL);

Ткст фмт(кткст0 s, const Вектор<Значение>& v);
Ткст фмт(цел язык, кткст0 s, const Вектор<Значение>& v);

ВекторМап<Ткст, Ткст> дайКлючиИни();

#ifndef PLATFORM_WIN32
проц спи(цел msec);
#endif

проц CheckedSerialize(const Событие<Поток&> serialize, Поток& stream, цел версия = Null);

бул грузи(Событие<Поток&> serialize, Поток& stream, цел версия = Null);
бул сохрани(Событие<Поток&> serialize, Поток& stream, цел версия = Null);
бул грузиИзФайла(Событие<Поток&> serialize, кткст0 file = NULL, цел версия = Null);
бул сохраниВФайл(Событие<Поток&> serialize, кткст0 file = NULL, цел версия = Null);

проц             региструйГлобКонфиг(кткст0 имя);
проц             региструйГлобСериализуй(кткст0 имя, Событие<Поток&> WhenSerialize);
проц             региструйГлобКонфиг(кткст0 имя, Событие<>  WhenFlush);

Ткст           дайДанныеГлобКонфига(кткст0 имя);
проц             устДанныеГлобКонфига(кткст0 имя, const Ткст& данные);

бул грузиИзГлоба(Событие<Поток&> serialize, кткст0 имя);
проц сохраниВГлоб(Событие<Поток&> serialize, кткст0 имя);

проц сериализуйГлобКонфиги(Поток& s);

#ifdef PLATFORM_WINCE
проц аборт();
#endif

Ткст  замени(const Ткст& s, const Вектор<Ткст>& найди, const Вектор<Ткст>& replace);
Ткст  замени(const Ткст& s, const ВекторМап<Ткст, Ткст>& fr);
ШТкст замени(const ШТкст& s, const Вектор<ШТкст>& найди, const Вектор<ШТкст>& replace);
ШТкст замени(const ШТкст& s, const ВекторМап<ШТкст, ШТкст>& fr);

бул SpellWordRaw(const ШТкст& wrd, цел lang, Вектор<Ткст> *withdia = NULL);
бул SpellWord(const ШТкст& ws, цел lang);
бул SpellWord(const шим *ws, цел len, цел lang);
проц SpellerAdd(const ШТкст& w, цел lang);
бул AllSpellerWords(цел lang, Врата<Ткст> iter);
Вектор<Ткст> SpellerFindCloseWords(цел lang, const Ткст& w, цел n);

Ткст GetP7Signature(кук данные, цел length, const Ткст& cert_pem, const Ткст& pkey_pem);
Ткст GetP7Signature(const Ткст& данные, const Ткст& cert_pem, const Ткст& pkey_pem);

// deprecated
Ткст гексТкст(const ббайт *s, цел count, цел sep = INT_MAX, цел sepchr = ' ');
Ткст гексТкст(const Ткст& s, цел sep = INT_MAX, цел sepchr = ' ');

Ткст сканГексТкст(кткст0 s, кткст0 lim);

Ткст Garble(кткст0 s, кткст0 e);
Ткст Garble(const Ткст& s);

Ткст кодируй64(const Ткст& s);
Ткст декодируй64(const Ткст& s);

Ткст сканГексТкст(кткст0 s, цел len);
Ткст сканГексТкст(const Ткст& s);
Ткст гексТкст(кук s, цел count, цел sep = INT_MAX, цел sepchr = ' ');
Ткст гексТкст(кткст0 s, цел count, цел sep = INT_MAX, цел sepchr = ' ');

бул PatternMatch(кткст0 p, кткст0 s);
бул PatternMatchMulti(кткст0 p, кткст0 s);

кткст0 дайПозИмяф(кткст0 path);
кткст0 дайПозРасшф(кткст0 path);

бул    естьРасшф(кткст0 path);
бул    HasWildcards(кткст0 path);
бул    полнпуть_ли(кткст0 path);

Ткст  дайДиректориюФайла(кткст0 path); // with DIR_SEP at the end
Ткст  дайПапкуФайла(кткст0 path); // without DIR_SEP at the end, if not Win32 root
Ткст  дайТитулф(кткст0 path);
Ткст  дайРасшф(кткст0 path);
Ткст  дайИмяф(кткст0 path);

Ткст  приставьИмяф(const Ткст& path, кткст0 имяф);

Ткст WinPath(кткст0 path);
Ткст UnixPath(кткст0 path);
Ткст  NativePath(кткст0 path);

Ткст  приставьРасш(кткст0 path, кткст0 ext);
Ткст  форсируйРасш(кткст0 path, кткст0 ext);

Ткст  дайФайлПоПути(кткст0 file, кткст0 paths, бул текущ = true, кткст0 curdir = NULL);

#ifndef PLATFORM_WINCE
Ткст  дайПолнПуть(кткст0 path);
Ткст  дайТекДир();
#endif

#ifdef PLATFORM_POSIX
бул устТекДир(кткст0 path);
#endif

бул измТекДир(кткст0 path);

цел сравни_ФВремя(const ФВремя& fa, const ФВремя& fb);

дол       дайДлинуф(кткст0 path);
бул        файлЕсть(кткст0 path);
бул        дирЕсть(кткст0 path);

ФВремя    дайФВремя(кткст0 path);
Время        дайВремяф(кткст0 path);
бул        устФВремя(кткст0 path, ФВремя ft);
бул        устВремяф(кткст0 path, Время time);
ФВремя    времяВФВремя(Время time);

бул        копируйфл(кткст0 oldpath, кткст0 newpath);
бул        переместифл(кткст0 oldpath, кткст0 newpath);
бул        удалифл(кткст0 path);

#ifdef PLATFORM_POSIX
бул        создайДир(кткст0 path, цел mode = 0755);
бул        реализуйДир(const Ткст& path, цел mode = 0755);
бул        RealizePath(const Ткст& path, цел mode = 0755);
#else
бул        создайДир(кткст0 path);
бул        реализуйДир(const Ткст& path);
бул        RealizePath(const Ткст& path);
#endif

бул        удалиДир(кткст0 path);

Ткст      нормализуйПуть(кткст0 path, кткст0 currdir);
Ткст      нормализуйПуть(кткст0 path);

бул        путиРавны(кткст0 p1, кткст0 p2);

#ifdef PLATFORM_POSIX
бул удалифл(кткст0 фн);
#endif

бул    DeleteFolderDeep(кткст0 dir, бул rdonly = false);

#ifndef PLATFORM_WINCE
Ткст  дайВремПуть();
Ткст  дайВремИмяф(кткст0 prefix = NULL);
#endif

Ткст дайПутьСимСсылки(кткст0 linkpath);

Вектор<Ткст> найдиВсеПути(const Ткст& dir, кткст0 patterns = "*", бцел opt = НАЙТИВСЕФАЙЛЫ);

ИнфОФС& стдИнфОФС();

цел    сис(кткст0 cmdline, Ткст& out, бул convertcharset = true);
Ткст сис(кткст0 cmdline, бул convertcharset = true);

цел    сис(кткст0 cmd, const Вектор<Ткст>& арг, Ткст& out, бул convertcharset = true);
Ткст сис(кткст0 cmd, const Вектор<Ткст>& арг, бул convertcharset = true);

Ткст фмт(const Ууид& ид);
Ткст фмтСТире(const Ууид& ид);
Ууид   сканируйУуид(кткст0 s);
ГенЗнач& генЗначУуид();

////////////////////// Операторы
бул  operator==(const Ууид& u, const Ууид& w) ;
бул  operator!=(const Ууид& u, const Ууид& w);

Ткст& operator<<(Ткст& s, кткст0 x);
Ткст& operator<<(Ткст& s, сим *x);
Ткст& operator<<(Ткст& s, const Ткст &x);
Ткст& operator<<(Ткст& s, сим x);
Ткст& operator<<(Ткст& s, кук x);
Ткст& operator<<(Ткст&& s, кткст0 x);
Ткст& operator<<(Ткст&& s, сим *x);
Ткст& operator<<(Ткст&& s, const Ткст &x);
Ткст& operator<<(Ткст&& s, сим x);
Ткст& operator<<(Ткст&& s, кук x);
ТкстБуф& operator<<(ТкстБуф& s, сим *x);
ТкстБуф& operator<<(ТкстБуф& s, const Ткст &x);
ТкстБуф& operator<<(ТкстБуф& s, сим x);
ТкстБуф& operator<<(ТкстБуф& s, кук x);
ТкстБуф& operator<<(ТкстБуф& s, кткст0 x);

Поток& operator<<(Поток& s, кткст0 x);
Поток& operator<<(Поток& s, сим *x);
Поток& operator<<(Поток& s, const Ткст &x);
Поток& operator<<(Поток& s, сим x);
Поток& operator<<(Поток& s, const ук x);
/*
Поток& operator<<(Поток& s, ук x);
*/

Джейсон& Джейсон::operator()(кткст0 ключ, const МассивДжейсон& array);


/////////////
#endif
