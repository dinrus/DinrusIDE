
namespace ДинрусРНЦП{
//LittleEndian
цел    подбери16лэ(const ук укз);
цел    подбери32лэ(const ук укз);
дол    подбери64лэ(const ук укз);
//BigEndian
цел    подбери16бэ(const ук укз) ;
цел    подбери32бэ(const ук укз);
дол    подбери64бэ(const ук укз) ;
//
цел    подбери16(const ук укз) ;
цел    подбери32(const ук укз);
дол    подбери64(const ук укз);
//LittleEndian
проц   помести16лэ(const ук укз, цел знач);
проц   помести32лэ(const ук укз, цел знач);
проц   помести64лэ(const ук укз, дол знач);
//BigEndian
проц   помести16бэ(const ук укз, цел знач) ;
проц   помести32бэ(const ук укз, цел знач)   ;
проц   помести64бэ(const ук укз, дол знач) ;
//
проц   помести16(const ук укз, цел знач);
проц   помести32(const ук укз, цел знач);
проц   помести64(const ук укз, дол знач) ;

бкрат  эндианРазворот16(бкрат v) ;
крат   эндианРазворот16(крат v);

бцел   эндианРазворот32(бцел v) ;
цел    эндианРазворот32(цел v) ;

 проц   эндианРазворот(бкрат& v) ;
 проц   эндианРазворот(крат& v) ;
 проц   эндианРазворот(бцел& v) ;
 проц   эндианРазворот(цел& v)  ;

#if defined(CPU_AMD64)
 бдол  эндианРазворот64(бдол v);
 дол   эндианРазворот64(дол v) ;
 проц   эндианРазворот(дол& v) ;
 проц   эндианРазворот(бдол& v) ;

#endif

 бкрат   эндианРазворот16(цел w) ;
 бкрат   эндианРазворот16(бцел w)  ;

проц эндианРазворот(бкрат *v, т_мера count);
проц эндианРазворот(крат *v, т_мера count);
проц эндианРазворот(бцел *v, т_мера count);
проц эндианРазворот(цел *v, т_мера count);
проц эндианРазворот(дол *v, т_мера count);
проц эндианРазворот(бдол *v, т_мера count);

#ifdef CPU_64
 бцел складиХэш(qword h);
#else
 бцел складиХэш(бцел h);
#endif

цел значимыеБиты(бцел x);
цел значимыеБиты64(бдол x);
бул вмещаетсяВЦел64(дво x);

#if defined(__SIZEOF_INT128__) && (__GNUC__ > 5 || __clang_major__ >= 5)
#ifdef CPU_X86
ббайт сложик64(бдол& result, const бдол& значение, ббайт carry) ;
#else
ббайт сложик64(бдол& r, бдол a, ббайт carry);
#endif
бдол умножь64(бдол a, бдол b, бдол& hi);
#elif defined(COMPILER_MSC) && defined(CPU_64)
бдол умножь64(бдол a, бдол b, бдол& hi);
ббайт сложик64(бдол& result, const бдол& значение, ббайт carry);
#else
ббайт сложик64(бдол& r, бдол a, ббайт carry);
бдол умножь64(бдол a, бдол b, бдол& hi);

#endif
}//ns end