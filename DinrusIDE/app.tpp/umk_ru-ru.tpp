topic "UMK - Построитель из командной строки";
[i448;a25;kKO9;2 $$1,0#37138531426314131252341829483380:class]
[l288;2 $$2,2#27521748481378242620020725143825:desc]
[0 $$3,0#96390100711032703541132217272105:end]
[H6;0 $$4,0#05600065144404261032431302351956:begin]
[i448;a25;kKO9;2 $$5,0#37138531426314131252341829483370:item]
[l288;a4;*@5;1 $$6,6#70004532496200323422659154056402:requirement]
[l288;i1121;b17;O9;~~~.1408;2 $$7,0#10431211400427159095818037425705:param]
[i448;b42;O9;2 $$8,8#61672508125594000341940100500538:tparam]
[b42;2 $$9,9#13035079074754324216151401829390:normal]
[a83;*R6 $$10,0#31310162474203024125188417583966:caption]
[b42;a42;ph2 $$11,11#45413000475342174754091244180557:text]
[H4;b83;*4 $$12,11#07864147445237544204411237157677:title]
[2 $$0,0#00000000000000000000000000000000:Default]
[{_}%RU-RU 
[s10; [@3 UMK `- Построитель из командной строки]&]
[s12; [@3 Содержание]&]
[s0; &]
[s0; [^topic`:`/`/DinrusIDE`/app`/umk`_ru`-ru`#1^ 1. Определение]&]
[s0; [^topic`:`/`/DinrusIDE`/app`/umk`_ru`-ru`#2^ 2. Интерфейс 
командной строки]&]
[s0; [^topic`:`/`/DinrusIDE`/app`/umk`_ru`-ru`#3^ 3. Примеры]&]
[s0; &]
[s12;:1: [@(128.0.255) 1. Определение]&]
[s11; [* UMK] (U`+`+ MaKe) `- это утилита из командной 
строки для построения программ U`+`+, 
использующая систему и метод построения 
пакетов/сборок U`+`+.&]
[s12;:2: [@(128.0.255) 2. Интерфейс командной строки]&]
[s11; Ниже приводится интерфейс командной 
строки UMK:&]
[s0; &]
[s0;l128;i224;O9; [*C3 umk ][*C@(0.0.255)3 сборка пакет ][*C3 `[][*C@(0.0.255)3 м
етод`_построения][*C3 `]][*C@4;3  ][*C3 `[`-`[][*C@4;3 a][*C3 `]`[][*C@4;3 b][*C3 `]
`[][*C@4;3 u][*C3 `]`[][*C@4;3 r][*C3 `]`[][*C@4;3 s][*C3 `]`[][*C@4;3 S][*C3 `]`[][*C@4;3 v][*C3 `]`[
][*C@4;3 m][*C3 `]`[][*C@4;3 d][*C3 `]`[][*C@4;3 M][*C3 `]`[][*C@4;3 M`=][*/C@3;3 makefile][*C3 `]`[
][*C@4;3 l][*C3 `]`[][*C@4;3 x][*C3 `]`[][*C@4;3 X][*C3 `]`[][%-*C@4;3 H][%-*/C@3;3 n][*C3 `]`]..][*C@4;3  
][*C3 `[`+][*C@(0.0.255)3 ФЛАГ][*C3 `[,][*C@(0.0.255)3 ФЛАГ][*C3 `]..`]][*C@4;3  
][*C3 `[][*C@(0.0.255)3 вых][*C3 `] `[][*C@(0.0.255)3 !][*C3  `[][*C@(0.0.255)3 аргпу
ска][*C3 `]..`]]&]
[s0;3 &]
[s11; Рассмотрим поближе все доступные 
опции:&]
[s11;l128;i150;O0; [*@(0.0.255) сборка] `- это прямой 
набор директорий гнёзд пакетов, относительн
ый к рабочей директории, который представляе
т сборку U`+`+, разделённых с помощью 
`',`'. Альтернативно это может быть 
предопределённая сборка (в файле 
.var), который в Win32 находится в одной 
директории с umk.exe, а на системах POSIX 
`- в директориях [@3 .config/u`+`+/umk ]или [@3 .config/u`+`+/DinrusID
E] или прямой путь к файлу .var.&]
[s11;l128;i150;O0; [*@(0.0.255) пакет ]`- главный пакет 
(программа под построение).&]
[s11;l128;i150;O0; [*@(0.0.255) метод`_построения] `- 
метод построения, который будет использоват
ься для постройки итогового исполнимого, 
указанный либо как имя, либо как метод 
построения (который затем нужно найти 
в [@3 .config/u`+`+/umk ]или [@3 .config/u`+`+/DinrusIDE] директориях)
, либо это прямой путь к файлу .bm. Если 
не указан, подразумевается метод 
построения [* CLANG]. Заметьте что на POSIX, 
umk автоматически создаёт [* CLANG] и [* GCC] 
методы построения, если их ещё нет.&]
[s11;l128;i150;O0; [*@(0.0.255) ФЛАГ][* и] `- [^topic`:`/`/DinrusIDE`/app`/Flags`_ru`-ru^ ф
лаги компиляции]. Если флаги не указаны, 
используется первая главная конфигурация, 
записанная в файле .upp.&]
[s11;l128;i150;O0; [*@(0.0.255) вых] переписывает имя 
папки вывода, файла или директории.&]
[s11;l128;i150;O0; [*C@(0.0.255)3 !] означает, что итоговый 
бинарник следует в случае успешного 
построения ещё и выполнить, и опциональные 
(необязательные) аргументы после 
[*C@(0.0.255)3 !] используются как аргументы 
для его пуска.&]
[s11;l128;i160;O0; Все прочие опции представлены 
ниже:&]
[ {{1914:8086<283;h1;@1 [s0; [3 Опция]]
:: [s0; [3 Описание]]
::^@2 [s0; [*C@4;3 a]]
::= [s0; [3 Перестроить все.]]
::^ [s0; [*C@4;3 b]]
::= [s0; [3 Использовать БЛИЦ.]]
::^ [s0; [*C@4;3 l]]
::= [s0; [3 Тихий режим.]]
::^ [s0; [*C@4;3 u]]
::= [s0; [3 Использовать целевую директорию.]]
::^ [s0; [*C@4;3 m]]
::= [s0; [3 Создать файл map.]]
::^ [s0; [*C@4;3 r]]
::= [s0; [3 Режим выпуска (дефолтен режим отладки 
с полной отладкой).]]
::^ [s0; [*C@4;3 d]]
::= [s0; [3 Режим отладки без отладочных символов.]]
::^ [s0; [*C@4;3 s]]
::= [s0; [3 Использовать совместные библиотеки.]]
::^ [s0; [*C@4;3 S]]
::= [s0; [3 Использовать совместные библиотеки 
и строить как совместные библиотеки.]]
::^ [s0; [*C@4;3 v]]
::= [s0; [3 Подробно.]]
::^ [s0; [*C@4;3 M]]
::= [s0; [3 Создать makefile (в файл ][*3 Makefile][3 ).]]
::^ [s0; [%-*C@4;3 M`=][*/C@3;3 makefile]]
::= [s0; [3 Создать makefile с заданным именем.]]
::^ [s0;%- [*C@4;3 H][*/C@3;3 n]]
::= [s0; [3 Число потоков, используемых при 
построении. Дефолт равен числу имеющихся 
логических ядер.]]}}&]
[s0; &]
[s12;:3: [@(128.0.255) 3. Примеры]&]
[s11; Примеры использования UMK расположены 
ниже:&]
[s0;*C@5+92 &]
[s0;l128; [*C@5+92 umk uppsrc ide GCC `-br `+GUI,SSE2,SHARED `~/DinrusIDE]&]
[s0;l128; [*C@5+92 umk uppsrc ide /usr/share/upp/GCC.bm `-br `+GUI,SSE2,SHARED 
`~/DinrusIDE]&]
[s0;l128;*C@5+92 &]
[s0;l128; [*C@5+92 umk examples Bombs GCC `-ab `+GUI,SHARED `~/bombs]&]
[s0;l128; [*C@5+92 umk upp/examples,upp/uppsrc Bombs `~/GCC.bm `-rv 
`+GUI,SHARED `~/bin]&]
[s0; ]]